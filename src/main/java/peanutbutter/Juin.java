package peanutbutter;

import peanutbutter.commands.Command;
import peanutbutter.commands.ReminderCommand;
import peanutbutter.exceptions.JuinException;
import peanutbutter.parser.Parser;
import peanutbutter.storage.Storage;
import peanutbutter.tasks.TaskList;
import peanutbutter.ui.Ui;

/**
 * Main class for the JUIN application.
 * <p>
 * Manages the task list, user interface, storage, and command parsing.
 * Handles both interactive console mode and programmatic responses
 * for user input.
 */
public class Juin {
    private TaskList taskList;
    private Storage storage;
    private Ui ui;
    private Parser parser;
    private String commandType;

    /**
     * Constructs a new JUIN instance with a storage file path.
     *
     * @param path the path to the storage file for tasks
     */
    public Juin(String path) {
        this.storage = new Storage(path);
        this.taskList = new TaskList(storage.read());
        this.parser = new Parser();
        this.ui = new Ui();
    }


    /**
     * Runs the interactive console mode of JUIN.
     * <p>
     * Continuously reads user input until an exit command is received.
     *
     * @throws JuinException if a command cannot be executed
     */
    public void run() throws JuinException {
        boolean isExit = false;
        while (!isExit) {
            String userInput = ui.readCommand();
            try {
                Command cmd = parser.parse(userInput);
                commandType = cmd.getClass().getSimpleName();
                isExit = cmd.run(taskList, ui);
                storage.write(taskList);
            } catch (JuinException e) {
                commandType = "Error";
                ui.errorMessage(e.getMessage());
            }
        }
    }

    /**
     * Generates a response for a user's chat input programmatically.
     * <p>
     * Parses and executes the command, updates storage, and returns
     * the last message generated by the UI.
     *
     * @param input the user input string
     * @return the response message generated by JUIN
     */
    public String getResponse(String input) {
        try {
            Command cmd = Parser.parse(input);
            commandType = cmd.getClass().getSimpleName();
            cmd.run(taskList, ui);
            commandType = cmd.getClass().getSimpleName();
            storage.write(taskList);
            return ui.getLastMessage();
        } catch (JuinException e) {
            return "Error: " + e.getMessage();
        }
    }

    /**
     * Returns the type of the last executed command.
     *
     * @return the class name of the last command or "Error" if a failure occurred
     */
    public String getCommandType() {
        return commandType;
    }

    /**
     * Returns the task list of juin.
     *
     * @return the current stored tasklist.
     */
    public TaskList getTaskList() {
        return this.taskList;
    }
}
